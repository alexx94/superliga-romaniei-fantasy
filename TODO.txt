- De abea ce am terminat de setup data de baze, PostgreSQL pe SupaBase, unde m am folosit de python sa fac scrape la toate
statisticile jucatorilor din Superliga Romaniei

- SA MODIFIC .CSV SI SA CONVERTEZ MINUTELE DIN STRING DE FORMA '1,234' in INT de forma '1234'

- Sa fac o clasa pentru care sa am un fel de interfata, exact cum e la Spring JPA, asa sa am si eu aici cu care
  sa interactionez automat cu baza de date, sa faca Query dupa anumite sabloane, practic sa fac Spring JPA in JS

- Eficientizare filtrare si Cautare dupa anumite Filtre, GraphQL? sau alte solutii, cea mai banala ar fi cu mai multe if-uri

@ZIUA 2 - 05/04/2025
  Am terminat in Supabase de initializat user_roles si am facut astfel incat fiecare user nou sa fie asociat cu un rol 'guest'.
  Mai departe voi creea un singur user cu rol 'admin', si acela va putea sa faca post/put/delete pentru entry-urile din tabelul
  superliga_ro cu jucatorii, restul vor putea doar sa vizualizeze.
  - Voi restrictiona vizualizarea, metoda GET, doar pentru cei logati

@ZIUA 2.5-3 - 06/04/2025 (seara intre ziua 2 - 3)
  Am terminat de creeat endpointul /auth/signup/ si am verificat si functinoeaza perfect, trimite confirmare creare cont pe email
  si dupa confirmare, creeaza si un nou entry in tabelul user_roles, deci si acolo merge totul perfect. 
  - Urmeaza endpointul /auth/login/ cu JWT si apoi sa fac middleware pentru verificare autentificare pe baza tokenului si 
    sa includa tokenul rolul utilizatorului pentru a securiza mai departe celelalte endpointuri, si in final sa creez acele 
    endpointuri ramase

@ZIUA 3 - 06/04/2025 (ziua)
  Intai am modificat user_roles, coloana row sa nu fie tip text, ci sa fie un custom type app_role care are enum('admin' sau 'guest'),
  unde 'guest' este default.

  Dupa asta am creeat acel hook de care ziceam mai jos ca trebuie facut, iar acum o sa modific modul in care stochez client side
  tokenul, ca sa fie in httpOnly cookies, in loc de localstorage ca sa fie mai secure pe partea clientului si sa nu fie probleme,
  si in final ii dam test la tot ce am creeat cu login.

  Am implementat endpointul /login/ si am adaugat si un Test pentru tabelul 'user_roles' ca sa verific daca am setat corect RLS policy
  si am modificat ce nu mergea pe partea de RLS, plus am rezolvat toate 'warnings' din Supabase legate de securitate.

  Am inclus cu success 'user_role' ca claim in token, care este stocat httpOnly, samesite si tot ce trebuie in cookies, si in final am
  atribuit un cont de admin, cu care voi lucra in continuare ca sa utilizez metode de tip POST/PUT/DELETE
  - Data viitoare de facut middleware ce restrictioneaza anumite operatii doar pentru admini, folosind tokenul stocat in cookies

TODO:
3) Permit metode de tip POST/PUT/DELETE, pentru jucatorii din baza de date, il caut dupa nume, echipa, il selectez, iar apoi
il pot edita sau sterge, sau in alt caz sa adaug un jucator complet nou, daca apare pe parcurs (de ex. promovat din academie) fara
sa mai fac iarasi scrape si upload la baza de date
            ** Partea de editat jucatorii poate fi actualizata cu un script care ruleaza automat o data pe saptamana sa vada
               daca apar jucatori noi, daca cumva se face scrape si difera nr. de linii, atunci proceseaza sa vada ce e nou si adauga
               automat in baza de date sub forma de POST  

6) Ca functionalitate basic, putin fun, sa adaug asemanator cu un shopping cart, in care adaug 'ones to watch' intr-o pagina,
ca sa le vada statisticile pentru etapele 'viitoare'.

7) Alt future update, cand se termina si se ajunge in playoff/playout, sa fac un scrape diferit la acele statistici, si sa modific 
db cu inca 2 tabele pentru ele si jucatori cu statistici pentru playoff/playout ca sa se vada si datele astea acolo.

8) De facut un tabel PUNCTE unde stochez cate puncte valoreaza fiecare stat in parte: gol = 6p, cartonas rosu = -2p, si asa mai 
departe, raportat la fiecare pozitie si tot asa.

9) Apoi mai adaug o coloana la toti jucatorii, pe care o calculez raportat la tabelul PUNCTE, si dau display in ea punctajul aferent,
care in mod normal se actualizeaza la fiecare saptamana.

10) Frontend -> cat mai basic, poze cu fiecare echipa din Superliga, si filtrare asemanator cu Premier League Fantasy ca sa nu fie 
probleme, foarte basic, dar functional. La fiecare call din frontend, in functie de ce apelez, o sa dau GET la baza de date din 
PostgreSQL

11) Sanitize input from users to further prevent SQL injection and add a test for that

12) Adaugare rol de 'player' care se joaca fantasy, si el are niste permisiuni in plus fata de utilizatorii tip 'guest', pentru a adauga la one's to watch jucatorii din Superliga, de a juca efectiv fantasy etc.

13) check input sent to user, to see if its valid to proceed, for ex. calling /login/ without an actual body, shouldn't even
go further and just redirect to the error page. Same for other similar functionalities.

FINAL: Deploy pe vercel la toata aplicatia, complet functionala.
ALTERNATIV: Constructie backend si in Spring Boot, sa am o varianta cu Express JS, si una cu Java, Spring Boot


********GITIGNORE pt .env si altele