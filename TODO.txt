- De abea ce am terminat de setup data de baze, PostgreSQL pe SupaBase, unde m am folosit de python sa fac scrape la toate
statisticile jucatorilor din Superliga Romaniei

- SA MODIFIC .CSV SI SA CONVERTEZ MINUTELE DIN STRING DE FORMA '1,234' in INT de forma '1234'

- Sa fac o clasa pentru care sa am un fel de interfata, exact cum e la Spring JPA, asa sa am si eu aici cu care
  sa interactionez automat cu baza de date, sa faca Query dupa anumite sabloane, practic sa fac Spring JPA in JS

- Eficientizare filtrare si Cautare dupa anumite Filtre, GraphQL? sau alte solutii, cea mai banala ar fi cu mai multe if-uri

@ZIUA 2 - 05/04/2025
  Am terminat in Supabase de initializat user_roles si am facut astfel incat fiecare user nou sa fie asociat cu un rol 'guest'.
  Mai departe voi creea un singur user cu rol 'admin', si acela va putea sa faca post/put/delete pentru entry-urile din tabelul
  superliga_ro cu jucatorii, restul vor putea doar sa vizualizeze.
  - Voi restrictiona vizualizarea, metoda GET, doar pentru cei logati

@ZIUA 2.5-3 - 06/04/2025 (seara intre ziua 2 - 3)
  Am terminat de creeat endpointul /auth/signup/ si am verificat si functinoeaza perfect, trimite confirmare creare cont pe email
  si dupa confirmare, creeaza si un nou entry in tabelul user_roles, deci si acolo merge totul perfect. 
  - Urmeaza endpointul /auth/login/ cu JWT si apoi sa fac middleware pentru verificare autentificare pe baza tokenului si 
    sa includa tokenul rolul utilizatorului pentru a securiza mai departe celelalte endpointuri, si in final sa creez acele 
    endpointuri ramase

@ZIUA 3 - 06/04/2025 (ziua)
  Intai am modificat user_roles, coloana row sa nu fie tip text, ci sa fie un custom type app_role care are enum('admin' sau 'guest'),
  unde 'guest' este default.

  Dupa asta am creeat acel hook de care ziceam mai jos ca trebuie facut, iar acum o sa modific modul in care stochez client side
  tokenul, ca sa fie in httpOnly cookies, in loc de localstorage ca sa fie mai secure pe partea clientului si sa nu fie probleme,
  si in final ii dam test la tot ce am creeat cu login.

  Am implementat endpointul /login/ si am adaugat si un Test pentru tabelul 'user_roles' ca sa verific daca am setat corect RLS policy
  si am modificat ce nu mergea pe partea de RLS, plus am rezolvat toate 'warnings' din Supabase legate de securitate.

  Am inclus cu success 'user_role' ca claim in token, care este stocat httpOnly, samesite si tot ce trebuie in cookies, si in final am
  atribuit un cont de admin, cu care voi lucra in continuare ca sa utilizez metode de tip POST/PUT/DELETE
  - Data viitoare de facut middleware ce restrictioneaza anumite operatii doar pentru admini, folosind tokenul stocat in cookies

@ZIUA 4 - 08/04/2025
  Am facut un middleware care verifica daca user-ul care face request-ul este sau nu authorized in functie de rolul pe care il are.
  Pentru aceasta am facut un jwtService unde procesez tokenul si extrag informatii din el, apoi authMiddleware care verifica
  daca cookies contine un jwt, si daca da il verifica daca este valid pentru request, iar apoi la final verifica daca se regaseste
  in claims si rolul corespunzator.

  Am facut un test cu care am verificat si facut debug, iar apoi am aplicat pentru ruta /players/ acest middleware si totul 
  functioneaza fara probleme.
  - Data viitoare de facut si celelalte operatii POST/PUT/DELETE pentru auth role = admin, iar in final un frontend.

@ZIUA 5 - 09/04/2025
  Am implementat POST pentru un nou jucator in baza de date, doar pentru cei cu rol 'admin'. Am adaugat un middleware care verifica
  inputul de tip 'player' care va urma sa fie procesat in backend, astfel incat sa fie unul valid si corespunzator formatului din 
  baza de date.
  - Data viitoare de facut PUT/DELETE, similar cu ceea ce am facut azi, si frontend.

@ZIUA 6 - 11/04/2025
  Am implementat PUT pentru a modifica jucatorul, am modificat putin si baza de date si constrangerile pentru chei semantice ca sa 
  includa Nume*Echipa*Varsta.
  - Data viitoare DELETE, si frontend. Plus sa ma ocup candva si de /signup/ sa analizeze log-ul din Supabase mai bine, si sa 
  returneze mesajul respectiv, de ex. email duplicat nu il returneaza.
  - Pentru functia save(player) din playerRepository, cand dau insert s-ar putea sa mearga direct insert la obiectul player,
  fara sa mai scriu fiecare bucatica in parte din obiectul json, avand in vedere ca sunt validate inainte de middleware si sunt bune.
   Deci, as putea sa sterg asta de acolo, si sa arate mai curat codul meu

@ZIUA 7 - 12/04/2025
  Am terminat si DELETE de facut, am rezolvat si un bug la PUT de care nu stiam ieri, in care returna ca 'data' un obiect non null,
  in cazul in care id-ul nu exista, dar Object.key(player).length era = 0 in acel caz, si a trebuit sa modific cu asta if statementul,
  ca sa mearga fara buguri, pt ca dadea mereu response 200 OK chiar si daca nu era gasit id-ul. Deci am rezolvat si asta si merge bine
  - Am terminat oficial Backendul, urmeaza frontend si sa rezolv pe Supabase acel lucru la signup, dar asta la final ca nu e complex.
  - Aplicatia finala o sa o fac initial fara pagina de Signup in productie, si o sa dau cateva conturi mockup pt useri sa testeze 
  aplicatia.

TODO:

6) Ca functionalitate basic, putin fun, sa adaug asemanator cu un shopping cart, in care adaug 'ones to watch' intr-o pagina,
ca sa le vada statisticile pentru etapele 'viitoare'.

7) Alt future update, cand se termina si se ajunge in playoff/playout, sa fac un scrape diferit la acele statistici, si sa modific 
db cu inca 2 tabele pentru ele si jucatori cu statistici pentru playoff/playout ca sa se vada si datele astea acolo.

8) De facut un tabel PUNCTE unde stochez cate puncte valoreaza fiecare stat in parte: gol = 6p, cartonas rosu = -2p, si asa mai 
departe, raportat la fiecare pozitie si tot asa.

9) Apoi mai adaug o coloana la toti jucatorii, pe care o calculez raportat la tabelul PUNCTE, si dau display in ea punctajul aferent,
care in mod normal se actualizeaza la fiecare saptamana.

10) Frontend -> cat mai basic, poze cu fiecare echipa din Superliga, si filtrare asemanator cu Premier League Fantasy ca sa nu fie 
probleme, foarte basic, dar functional. La fiecare call din frontend, in functie de ce apelez, o sa dau GET la baza de date din 
PostgreSQL

12) Adaugare rol de 'player' care se joaca fantasy, si el are niste permisiuni in plus fata de utilizatorii tip 'guest', pentru a adauga la one's to watch jucatorii din Superliga, de a juca efectiv fantasy etc.

13) check input sent to user, to see if its valid to proceed, for ex. calling /login/ without an actual body, shouldn't even
go further and just redirect to the error page. Same for other similar functionalities.

14) BUG TO FIX: If i have duplicate email and try to sign up, it doesnt go through to create a new account, but instead of getting 
an error or a message in my request, I get success 200, but in the logs of the API endpoint to singup it doesnt actually go through,
so I have to handle this by error handling this and return a specific message, instead of 200.

FINAL: Deploy pe vercel la toata aplicatia, complet functionala.
ALTERNATIV: Constructie backend si in Spring Boot, sa am o varianta cu Express JS, si una cu Java, Spring Boot


********GITIGNORE pt .env si altele